/*
 * Grammar so far supported, up to and including Chapter 2
 *
 * I am going a little off-piste with how I lay this out, and that's primarily
 * so that I can later encode my precedence order directly into the grammar.
 */

// Top level

program ::=
    function

// Declarations

function ::=
    "int" identifier "(" "void" ")" block

// Statements

block ::=
    "{" return "}"

return ::=
    "return" expression ";"

// Expressions

expression ::=
    unary

unary ::=
    unary_op primary | primary

primary ::=
    integer | "(" expression ")"

// Operators

unary_op ::=
    "-" | "~"

// Raw types

identifier ::=
    alpha+

integer ::=
    digit+

alpha ::=
    [a-zA-Z_]

digit ::=
    [0-9]